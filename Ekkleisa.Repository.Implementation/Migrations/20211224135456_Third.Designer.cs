// <auto-generated />
using System;
using Ekkleisa.Repository.Implementation.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Ekkleisa.Repository.Implementation.Migrations
{
    [DbContext(typeof(EkklesiaContext))]
    [Migration("20211224135456_Third")]
    partial class Third
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Ekklesia.Entities.Entities.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Member");
                });

            modelBuilder.Entity("Ekklesia.Entities.Entities.Occasion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.ToTable("Occasion");
                });

            modelBuilder.Entity("Ekklesia.Entities.Entities.OccasionMember", b =>
                {
                    b.Property<int>("OccasionId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("BaptismId")
                        .HasColumnType("int");

                    b.Property<int?>("ReunionId")
                        .HasColumnType("int");

                    b.Property<int?>("SundaySchoolId")
                        .HasColumnType("int");

                    b.HasKey("OccasionId", "MemberId");

                    b.HasIndex("BaptismId");

                    b.HasIndex("MemberId");

                    b.HasIndex("ReunionId");

                    b.HasIndex("SundaySchoolId");

                    b.ToTable("OccasionMember");
                });

            modelBuilder.Entity("Ekklesia.Entities.Entities.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<float>("Value")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("Ekklesia.Entities.Entities.Atypical", b =>
                {
                    b.HasBaseType("Ekklesia.Entities.Entities.Occasion");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.ToTable("Atypical");
                });

            modelBuilder.Entity("Ekklesia.Entities.Entities.Baptism", b =>
                {
                    b.HasBaseType("Ekklesia.Entities.Entities.Occasion");

                    b.Property<int>("BaptizerId")
                        .HasColumnType("int");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasIndex("BaptizerId");

                    b.ToTable("Baptism");
                });

            modelBuilder.Entity("Ekklesia.Entities.Entities.Cell", b =>
                {
                    b.HasBaseType("Ekklesia.Entities.Entities.Occasion");

                    b.Property<int>("Convertions")
                        .HasColumnType("int");

                    b.ToTable("Cell");
                });

            modelBuilder.Entity("Ekklesia.Entities.Entities.Cult", b =>
                {
                    b.HasBaseType("Ekklesia.Entities.Entities.Occasion");

                    b.Property<int>("Convertions")
                        .HasColumnType("int");

                    b.Property<string>("CultType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("Internal")
                        .HasColumnType("bit");

                    b.Property<string>("KeyVerse")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("NumberOfPeople")
                        .HasColumnType("int");

                    b.ToTable("Cult");
                });

            modelBuilder.Entity("Ekklesia.Entities.Entities.Reunion", b =>
                {
                    b.HasBaseType("Ekklesia.Entities.Entities.Occasion");

                    b.Property<DateTime>("EndTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("ReunionType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("SpeakerId")
                        .HasColumnType("int");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasIndex("SpeakerId");

                    b.ToTable("Reunion");
                });

            modelBuilder.Entity("Ekklesia.Entities.Entities.SundaySchool", b =>
                {
                    b.HasBaseType("Ekklesia.Entities.Entities.Occasion");

                    b.Property<int>("NumberOfBibles")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Verse")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Visitants")
                        .HasColumnType("int");

                    b.HasIndex("TeacherId");

                    b.ToTable("SundaySchool");
                });

            modelBuilder.Entity("Ekklesia.Entities.Entities.Expense", b =>
                {
                    b.HasBaseType("Ekklesia.Entities.Entities.Transaction");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Receipt")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Expense");
                });

            modelBuilder.Entity("Ekklesia.Entities.Entities.Income", b =>
                {
                    b.HasBaseType("Ekklesia.Entities.Entities.Transaction");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.ToTable("Income");
                });

            modelBuilder.Entity("Ekklesia.Entities.Entities.OccasionMember", b =>
                {
                    b.HasOne("Ekklesia.Entities.Entities.Baptism", null)
                        .WithMany("Baptizeds")
                        .HasForeignKey("BaptismId");

                    b.HasOne("Ekklesia.Entities.Entities.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ekklesia.Entities.Entities.Occasion", "Occasion")
                        .WithMany()
                        .HasForeignKey("OccasionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ekklesia.Entities.Entities.Reunion", null)
                        .WithMany("Members")
                        .HasForeignKey("ReunionId");

                    b.HasOne("Ekklesia.Entities.Entities.SundaySchool", null)
                        .WithMany("Participants")
                        .HasForeignKey("SundaySchoolId");

                    b.Navigation("Member");

                    b.Navigation("Occasion");
                });

            modelBuilder.Entity("Ekklesia.Entities.Entities.Atypical", b =>
                {
                    b.HasOne("Ekklesia.Entities.Entities.Occasion", null)
                        .WithOne()
                        .HasForeignKey("Ekklesia.Entities.Entities.Atypical", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ekklesia.Entities.Entities.Baptism", b =>
                {
                    b.HasOne("Ekklesia.Entities.Entities.Member", "Baptizer")
                        .WithMany()
                        .HasForeignKey("BaptizerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ekklesia.Entities.Entities.Occasion", null)
                        .WithOne()
                        .HasForeignKey("Ekklesia.Entities.Entities.Baptism", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Baptizer");
                });

            modelBuilder.Entity("Ekklesia.Entities.Entities.Cell", b =>
                {
                    b.HasOne("Ekklesia.Entities.Entities.Occasion", null)
                        .WithOne()
                        .HasForeignKey("Ekklesia.Entities.Entities.Cell", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ekklesia.Entities.Entities.Cult", b =>
                {
                    b.HasOne("Ekklesia.Entities.Entities.Occasion", null)
                        .WithOne()
                        .HasForeignKey("Ekklesia.Entities.Entities.Cult", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ekklesia.Entities.Entities.Reunion", b =>
                {
                    b.HasOne("Ekklesia.Entities.Entities.Occasion", null)
                        .WithOne()
                        .HasForeignKey("Ekklesia.Entities.Entities.Reunion", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Ekklesia.Entities.Entities.Member", "Speaker")
                        .WithMany()
                        .HasForeignKey("SpeakerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Speaker");
                });

            modelBuilder.Entity("Ekklesia.Entities.Entities.SundaySchool", b =>
                {
                    b.HasOne("Ekklesia.Entities.Entities.Occasion", null)
                        .WithOne()
                        .HasForeignKey("Ekklesia.Entities.Entities.SundaySchool", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Ekklesia.Entities.Entities.Member", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Ekklesia.Entities.Entities.Expense", b =>
                {
                    b.HasOne("Ekklesia.Entities.Entities.Transaction", null)
                        .WithOne()
                        .HasForeignKey("Ekklesia.Entities.Entities.Expense", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ekklesia.Entities.Entities.Income", b =>
                {
                    b.HasOne("Ekklesia.Entities.Entities.Transaction", null)
                        .WithOne()
                        .HasForeignKey("Ekklesia.Entities.Entities.Income", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ekklesia.Entities.Entities.Baptism", b =>
                {
                    b.Navigation("Baptizeds");
                });

            modelBuilder.Entity("Ekklesia.Entities.Entities.Reunion", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("Ekklesia.Entities.Entities.SundaySchool", b =>
                {
                    b.Navigation("Participants");
                });
#pragma warning restore 612, 618
        }
    }
}
